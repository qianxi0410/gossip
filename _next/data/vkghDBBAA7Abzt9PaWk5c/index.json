{"pageProps":{"user":{"login":"qianxi0410","nick_name":"q1anx1","avatar_url":"https://avatars.githubusercontent.com/u/55543743?v=4","bio":"Ghost of the static type system"},"posts":[{"id":35,"title":"docker-proxy","created_at":"2022-08-27T03:22:57Z","updated_at":"2022-09-25T01:40:18Z","content":"最近在使用 docker 的时候，即便是配置了国内的镜像，也还是慢的可怕。\r\n而且国内的镜像源并不能实时同步镜像的最新版本，所以还是选择了国外的源 + 代理的方式。\r\n\r\n## pull-time proxy\r\n\r\n拉取镜像的时候，是使用`dockerd`守护进程。因此代理需要配置在`dockerd`环境，而这个环境是`systemd`负责，因此实际上是配置`systemd`代理。\r\n\r\n```bash\r\nsudo mkdir -p /etc/systemd/system/docker.service.d\r\nsudo touch /etc/systemd/system/docker.service.d/proxy.conf\r\n```\r\n\r\n添加下面的内容到`proxy.conf`文件中：\r\n\r\n```txt\r\n[Service]\r\nEnvironment=\"HTTP_PROXY=http://ip:port/\"\r\nEnvironment=\"HTTPS_PROXY=http://ip:port/\"\r\nEnvironment=\"NO_PROXY=localhost,127.0.0.1\"\r\n```\r\n\r\n> 这里的 ip 是你的代理 ip 一般是 localhost，port 则是你代理转发的端口。\r\n\r\n## run-time proxy\r\n\r\n运行容器的时候，如果你需要在容器内使用代理，则需要配置容器的代理。\r\n\r\n这里有三种配置方法：\r\n\r\n1. 容器运行时指定\r\n\r\n```bash\r\ndocker run -e HTTP_PROXY=http://ip:port/ -e HTTPS_PROXY=http://ip:port/ -e NO_PROXY=localhost ...\r\n```\r\n\r\n这种方式的优点就是直接，但缺点就是每次启动容器都需要显示的设置。\r\n为了解决这种情况，在 Docker 17.07 以上，可以使用配置 Docker 客户端的方式，即 2。\r\n\r\n2. 客户端全局配置\r\n\r\n在`~/.docker/config.json`中，加入以下内容：\r\n\r\n```json\r\n{\r\n  \"proxies\": {\r\n    \"default\": {\r\n      \"httpProxy\": \"http://ip:port\",\r\n      \"httpsProxy\": \"http://ip:port\",\r\n      \"noProxy\": \"localhost,127.0.0.0/8\"\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n3. host 网络模式\r\n\r\n如果你的容器使用的是 host 网络模式，那么容器内的网络就是宿主机的网络，因此可以直接使用宿主机的代理。\r\n\r\n```bash\r\ndocker run --network host ...\r\n```\r\n\r\n> 上面的 ip 是 docker0 网卡的 ip，而不是容器内部的 ip。使用 ip addr show docker0 查看。\r\n\r\n## build-time proxy\r\n\r\n容器构建的时候，本质上也是启动了一个容器。\r\n\r\n这里没找到配置文件的方法，只能使用环境变量的方式，但是参数略有不同。\r\n\r\n```bash\r\ndocker build \\\r\n    --build-arg \"HTTP_PROXY=http://ip:port/\" \\\r\n    --build-arg \"HTTPS_PROXY=http://ip:port/\" \\\r\n    --build-arg \"NO_PROXY=localhost,127.0.0.1\" \\\r\n    ...\r\n```\r\n\r\n同样的，这里的 ip 也是`docker0`网卡的 ip。\r\n\r\n> 构建过程中，更推荐使用 host 网络模式，因为这样可以直接使用宿主机的代理。\r\n\r\n## 重启生效\r\n\r\n~~重启计算机即可~~\r\n\r\n`build-time` 代理是在执行前设置的，所以修改后，下次执行立即生效。`run-time` 代理的修改也是立即生效的，但是只针对以后启动的容器，对已经启动的容器无效。\r\n\r\n`pull-time`代理的修改比较特殊，它实际上是改`systemd`的配置，因此需要重载`systemd`并重启`dockerd`才能生效。\r\n\r\n```bash\r\nsudo systemctl daemon-reload\r\nsudo systemctl restart docker\r\n```\r\n","author":"qianxi0410","reactions":{"url":"https://api.github.com/repos/qianxi0410/gossip/issues/35/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"labels":["published","docker","proxy"]},{"id":6,"title":"终端工具集","created_at":"2022-07-24T14:45:54Z","updated_at":"2022-08-26T02:33:33Z","content":"俗话说，工欲善其事，必先利其器。~~差生文具多罢了！~~\r\n\r\n推荐一些能够提升效率的终端工具：\r\n\r\n[yay](https://github.com/Jguer/yay): 又一个 aur helper，为什么不推荐`paru`，因为`yay`看起来更开心一些。\r\n\r\n[zsh](https://github.com/zsh-users/zsh): 比`bash`更强的 shell。\r\n\r\n[oh-my-zsh](https://github.com/ohmyzsh/ohmyzsh): 一个`zsh`的框架，自带许多插件和主题。\r\n\r\n[starship](https://github.com/starship/starship): `zsh`的主题，但是更好看，而且更快。\r\n\r\n[kitty](https://github.com/kovidgoyal/kitty): 一个 GPU 加速的终端，虽然的 python 写的，不用`alacritty`是因为它不支持连写。\r\n\r\n[FiraCode](https://github.com/tonsky/FiraCode): 一个带连写的编程字体。\r\n\r\n[git](https://git-scm.com/): 版本管理。\r\n\r\n[hub](https://github.com/github/hub): 一个更好的`git`增强工具。\r\n\r\n[cli](https://github.com/cli/cli): GitHub 官方的命令行工具，可以省去一些图形化操作。和`hub`有些功能重合。\r\n\r\n[lazygit](https://github.com/jesseduffield/lazygit): 终端的`git`命令 UI。\r\n\r\n[lazydocker](https://github.com/jesseduffield/lazydocker): 终端的`docker`命令 UI。\r\n\r\n[degit](https://github.com/Rich-Harris/degit): 简单的`git`项目脚手架，能够清除仓库的提交历史。\r\n\r\n[difftastic](https://github.com/Wilfred/difftastic): `git diff`命令的增强。\r\n\r\n[ni](https://github.com/antfu/ni): 包管理工具卷上天，`ni`大一统。\r\n\r\n[pnpm](https://github.com/pnpm/pnpm) : 更快、更快、还是他妈的更快。\r\n\r\n[npm-check-updates](https://github.com/raineorshine/npm-check-updates): `package.json`的依赖更新工具。\r\n\r\n[zoxide](https://github.com/ajeetdsouza/zoxide): `autojump`，但是是用`rust`写的。\r\n\r\n[ranger](https://github.com/ranger/ranger): 一个终端的文件管理器。\r\n\r\n[fzf](https://github.com/junegunn/fzf): 模糊查询。\r\n\r\n[fzf-tab](https://github.com/Aloxaf/fzf-tab): 用 fzf 替换 zsh 的默认补全选择菜单。\r\n\r\n[mcfly](https://github.com/cantino/mcfly): 更加友善的`zsh`历史命令搜索提示。\r\n\r\n[neovim](https://github.com/neovim/neovim): `vim` fork 出来的终端编辑器，但是更 **powerful**。\r\n\r\n[gvm](https://github.com/moovweb/gvm): `go` 多版本管理工具。\r\n\r\n[fnm](https://github.com/Schniz/fnm): `node`多版本管理工具。\r\n\r\n[tmux](https://github.com/tmux/tmux): 让你的`session`和终端分离。\r\n\r\n[htop](https://github.com/hishamhm/htop): 更好的`top`命令。\r\n\r\n[exa](https://github.com/ogham/exa): 更好的`ls`命令。\r\n\r\n[duf](https://github.com/muesli/duf): 更好的`df`命令。\r\n\r\n[ncdu](https://github.com/rofl0r/ncdu): 更好的`du`命令。\r\n\r\n[tldr](https://github.com/tldr-pages/tldr): 太长不看。\r\n\r\n[bottom](https://github.com/ClementTsang/bottom): 系统的各种运行时参数查看。\r\n\r\n[neofetch](https://github.com/dylanaraps/neofetch): 系统参数查看。\r\n\r\n[scc](https://github.com/boyter/scc): 项目代码行数查看。\r\n\r\n[httpie](https://github.com/httpie/httpie): 或许是更好的`curl`？\r\n\r\n[ripgrep](https://github.com/BurntSushi/ripgrep): 安息吧，`grep`。更好的正则查询过滤。\r\n\r\n[golines](https://github.com/segmentio/golines): 限制你的`go`代码单行最大长度。\r\n\r\n[gofumpt](https://github.com/mvdan/gofumpt): 更好的`gofmt`，完全和前者兼容。\r\n\r\n[golangci-lint](https://github.com/golangci/golangci-lint): `go`的 lint 工具。\r\n\r\n[eslint](https://eslint.org): 让你的`js`代码更加规范。\r\n\r\n[vite](https://vitejs.dev/): f\\*\\*k `webpack`。\r\n\r\n[tig](https://github.com/jonas/tig): 更好的`git log`查看器。\r\n\r\n[gping](https://github.com/orf/gping): 带有可视化界面的`ping`。\r\n\r\n[bat](https://github.com/sharkdp/bat): 更好的`cat`。\r\n\r\n[act](https://github.com/nektos/act): 在本地运行你的GitHub Action。\r\n\r\n[procs](https://github.com/dalance/procs): 更好的`ps`。\r\n\r\n[sd](https://github.com/chmln/sd): 直观的查找和替换 CLI，更好的`sed`。\r\n","author":"qianxi0410","reactions":{"url":"https://api.github.com/repos/qianxi0410/gossip/issues/6/reactions","total_count":1,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":1},"labels":["published","terminal","linux"]}]},"__N_SSG":true}