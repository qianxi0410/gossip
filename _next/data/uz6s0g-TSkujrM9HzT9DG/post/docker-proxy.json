{"pageProps":{"post":{"id":35,"title":"docker-proxy","created_at":"2022-08-27T03:22:57Z","updated_at":"2022-09-25T01:40:18Z","content":"最近在使用 docker 的时候，即便是配置了国内的镜像，也还是慢的可怕。\r\n而且国内的镜像源并不能实时同步镜像的最新版本，所以还是选择了国外的源 + 代理的方式。\r\n\r\n## pull-time proxy\r\n\r\n拉取镜像的时候，是使用`dockerd`守护进程。因此代理需要配置在`dockerd`环境，而这个环境是`systemd`负责，因此实际上是配置`systemd`代理。\r\n\r\n```bash\r\nsudo mkdir -p /etc/systemd/system/docker.service.d\r\nsudo touch /etc/systemd/system/docker.service.d/proxy.conf\r\n```\r\n\r\n添加下面的内容到`proxy.conf`文件中：\r\n\r\n```txt\r\n[Service]\r\nEnvironment=\"HTTP_PROXY=http://ip:port/\"\r\nEnvironment=\"HTTPS_PROXY=http://ip:port/\"\r\nEnvironment=\"NO_PROXY=localhost,127.0.0.1\"\r\n```\r\n\r\n> 这里的 ip 是你的代理 ip 一般是 localhost，port 则是你代理转发的端口。\r\n\r\n## run-time proxy\r\n\r\n运行容器的时候，如果你需要在容器内使用代理，则需要配置容器的代理。\r\n\r\n这里有三种配置方法：\r\n\r\n1. 容器运行时指定\r\n\r\n```bash\r\ndocker run -e HTTP_PROXY=http://ip:port/ -e HTTPS_PROXY=http://ip:port/ -e NO_PROXY=localhost ...\r\n```\r\n\r\n这种方式的优点就是直接，但缺点就是每次启动容器都需要显示的设置。\r\n为了解决这种情况，在 Docker 17.07 以上，可以使用配置 Docker 客户端的方式，即 2。\r\n\r\n2. 客户端全局配置\r\n\r\n在`~/.docker/config.json`中，加入以下内容：\r\n\r\n```json\r\n{\r\n  \"proxies\": {\r\n    \"default\": {\r\n      \"httpProxy\": \"http://ip:port\",\r\n      \"httpsProxy\": \"http://ip:port\",\r\n      \"noProxy\": \"localhost,127.0.0.0/8\"\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n3. host 网络模式\r\n\r\n如果你的容器使用的是 host 网络模式，那么容器内的网络就是宿主机的网络，因此可以直接使用宿主机的代理。\r\n\r\n```bash\r\ndocker run --network host ...\r\n```\r\n\r\n> 上面的 ip 是 docker0 网卡的 ip，而不是容器内部的 ip。使用 ip addr show docker0 查看。\r\n\r\n## build-time proxy\r\n\r\n容器构建的时候，本质上也是启动了一个容器。\r\n\r\n这里没找到配置文件的方法，只能使用环境变量的方式，但是参数略有不同。\r\n\r\n```bash\r\ndocker build \\\r\n    --build-arg \"HTTP_PROXY=http://ip:port/\" \\\r\n    --build-arg \"HTTPS_PROXY=http://ip:port/\" \\\r\n    --build-arg \"NO_PROXY=localhost,127.0.0.1\" \\\r\n    ...\r\n```\r\n\r\n同样的，这里的 ip 也是`docker0`网卡的 ip。\r\n\r\n> 构建过程中，更推荐使用 host 网络模式，因为这样可以直接使用宿主机的代理。\r\n\r\n## 重启生效\r\n\r\n~~重启计算机即可~~\r\n\r\n`build-time` 代理是在执行前设置的，所以修改后，下次执行立即生效。`run-time` 代理的修改也是立即生效的，但是只针对以后启动的容器，对已经启动的容器无效。\r\n\r\n`pull-time`代理的修改比较特殊，它实际上是改`systemd`的配置，因此需要重载`systemd`并重启`dockerd`才能生效。\r\n\r\n```bash\r\nsudo systemctl daemon-reload\r\nsudo systemctl restart docker\r\n```\r\n","author":"qianxi0410","reactions":{"url":"https://api.github.com/repos/qianxi0410/gossip/issues/35/reactions","total_count":0,"+1":0,"-1":0,"laugh":0,"hooray":0,"confused":0,"heart":0,"rocket":0,"eyes":0},"labels":["published","docker","proxy"]}},"__N_SSG":true}